<?php

/**
 * @file
 * Farm Log install
 */

/**
 * Migrate all field_farm_date fields to Log timestamp property.
 */
function farm_log_update_7000(&$sandbox) {

  /**
   * As of January 16th, 2015, the Log module has a timestamp property,
   * which has the same goal as the field_farm_date field, so we're
   * migrating to that.
   */

  // Find all field_farm_date instances in logs.
  $types = log_types();
  $fields = array();
  foreach ($types as $type) {
    $field = field_info_instance('log', 'field_farm_date', $type->type);
    if (!empty($field)) {
      $fields[] = $field;
    }
  }

  // Iterate through the fields.
  foreach ($fields as $field) {

    // Load all logs of this type.
    $logs = array();
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'log');
    $query->entityCondition('bundle', $field['bundle']);
    $result = $query->execute();
    if (isset($result['log'])) {
      $log_ids = array_keys($result['log']);
      $logs = entity_load('log', $log_ids);
    }

    // Iterate through the logs.
    foreach ($logs as $log) {

      // If it has a field_farm_date value...
      if (!empty($log->field_farm_date[LANGUAGE_NONE][0]['value'])) {

        // Migrate the timestamp.
        $log->timestamp = $log->field_farm_date[LANGUAGE_NONE][0]['value'];

        // Save the log.
        log_save($log);
      }
    }

    // Delete the field instance.
    field_delete_instance($field);
  }
}

/**
 * Migrate Issues to Observations.
 */
function farm_log_update_7001(&$sandbox) {

  // Create a new "Issue" Observation Type.
  $vocab = taxonomy_vocabulary_machine_name_load('farm_observation_types');
  $term = entity_create('taxonomy_term', array(
    'name' => 'Issue',
    'vid' => $vocab->vid
  ));
  taxonomy_term_save($term);

  // Load all issue logs.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'log');
  $query->entityCondition('bundle', 'farm_issue');
  $result = $query->execute();
  if (isset($result['log'])) {
    $ids = array_keys($result['log']);
    $logs = entity_load('log', $ids);
  }

  // If logs were loaded, iterate through them...
  if (!empty($logs)) {
    foreach ($logs as $log) {

      // Build a list of values for the new observation log.
      $values = array(
        'type' => 'farm_observation',
        'name' => $log->name,
        'timestamp' => $log->timestamp,
        'created' => $log->created,
        'changed' => $log->changed,
        'done' => $log->done,
        'uid' => $log->uid,
      );

      // Create a new observation log.
      $observation = entity_create('log', $values);

      // Assign it to the new "Issue" Observation Type.
      $observation->field_farm_observation_type[LANGUAGE_NONE][] = array(
        'tid' => $term->tid,
      );

      // Copy fields from the issue log.
      $observation->field_farm_asset = $log->field_farm_assets;
      $observation->field_farm_notes = $log->field_farm_notes;

      // Save the new log.
      log_save($observation);

      // Delete the old log.
      log_delete($log);
    }
  }

  // Delete the View, if it still exists.
  $view = views_get_view('farm_log_issues');
  if (!empty($view)) {
    views_delete_view($view);
  }

  // Delete the Priority Levels vocabulary.
  $vocab = taxonomy_vocabulary_machine_name_load('farm_priority');
  if (!empty($vocab)) {
    taxonomy_vocabulary_delete($vocab->vid);
  }

  // Delete the issue log type.
  $log_type = log_type_load('farm_issue');
  if (!empty($log_type)) {
    log_type_delete($log_type);
  }
}

/**
 * Migrate Areas and Assets fields to Area and Asset field.
 */
function farm_log_update_7002(&$sandbox) {

  // Load all activity logs.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'log');
  $query->entityCondition('bundle', 'farm_activity');
  $result = $query->execute();
  if (isset($result['log'])) {
    $ids = array_keys($result['log']);
    $logs = entity_load('log', $ids);
  }

  // If logs were loaded, iterate through them...
  if (!empty($logs)) {
    foreach ($logs as $log) {

      // Copy the first area, discard the rest.
      if (!empty($log->field_farm_areas[LANGUAGE_NONE][0])) {
        $log->field_farm_area[LANGUAGE_NONE][] = $log->field_farm_areas[LANGUAGE_NONE][0];
      }

      // Copy the first asset, discard the rest.
      if (!empty($log->field_farm_assets[LANGUAGE_NONE][0])) {
        $log->field_farm_asset[LANGUAGE_NONE][] = $log->field_farm_assets[LANGUAGE_NONE][0];
      }

      // Save the log.
      log_save($log);
    }
  }

  // Delete the areas field.
  $field = field_info_instance('log', 'field_farm_areas', 'farm_activity');
  field_delete_instance($field);

  // Delete the assets field.
  $field = field_info_instance('log', 'field_farm_assets', 'farm_activity');
  field_delete_instance($field);
}
