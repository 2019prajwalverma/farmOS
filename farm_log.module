<?php
/**
 * @file
 * Code for the Farm Log feature.
 */

// Include Features code.
include_once 'farm_log.features.inc';

/**
 * Implements hook_permission().
 */
function farm_log_permission() {
  return array(
    'view farm logs' => array(
      'title' => t('View farm logs'),
      'description' => t('View all farm-related log items.'),
    ),
  );
}

/**
 * Implements hook_farm_admin_actions().
 */
function farm_log_farm_admin_actions() {

  // Define farm area actions.
  $actions = array(
    'log' => array(
      'title' => t('Add a log'),
      'href' => 'log/add',
      'paths' => array(
        'farm',
        'farm/logs',
      ),
      'weight' => 1,
    ),
  );
  return $actions;
}

/**
 * Implements hook_form_alter().
 */
function farm_log_form_alter(&$form, &$form_state, $form_id) {

  // If this is a log form...
  if ($form_id == 'log_form') {

    // If there is an asset(s) reference field.
    if (!empty($form['field_farm_asset'])) {

      // Alter the form using our helper function.
      farm_log_form_prepopulate_asset($form, 'field_farm_asset');
    }

    // If there is an area(s) reference field...
    if (!empty($form['field_farm_area'])) {

      // Alter the form with the farm_log helper function.
      farm_log_form_prepopulate_area($form, 'field_farm_area');
    }
  }
}

/**
 * Helper function for enabling asset prepopulation in log forms.
 *
 * @param array $form
 *   The form array to modify, passed by reference.
 * @param string $field_name
 *   The machine name of the entity reference field that should be populated.
 *
 * @return array|bool farm_asset
 *   Returns the asset objects in an array, if found, FALSE otherwise.
 */
function farm_log_form_prepopulate_asset(array &$form, $field_name = 'field_farm_asset') {

  // If the "farm_asset" GET parameter isn't set, bail.
  $params = drupal_get_query_parameters();
  if (empty($params['farm_asset'])) {
    return FALSE;
  }

  // If only a single asset id is passed, convert it to an array.
  if (!is_array($params['farm_asset'])) {
    $params['farm_asset'] = array($params['farm_asset']);
  }

  // Validate that all the asset IDs are valid by loading the assets themselves.
  $assets = array();
  foreach($params['farm_asset'] as $asset_id) {

    // Attempt to load the asset.
    $asset = farm_asset_load($asset_id);

    // If it loaded, add it to the array.
    if (!empty($asset)) {
      $assets[] = $asset;
    }
  }

  // If there are no assets, bail.
  if (empty($assets)) {
    return FALSE;
  }

  // Load the field instance definition.
  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];
  $field_instance = field_info_instance($entity_type, $field_name, $bundle);

  // If the widget type is "radios/checkboxes" or "select list"...
  if (in_array($field_instance['widget']['type'], array('options_buttons', 'options_select'))) {

    // Build a list of asset ID.
    $asset_ids = array();
    foreach ($assets as $asset) {
      $asset_ids[] = $asset->id;
    }

    // Use the array of asset IDs as the field's default value.
    if (empty($form[$field_name][LANGUAGE_NONE]['#default_value'])) {
      $form[$field_name][LANGUAGE_NONE]['#default_value'] = $asset_ids;
    }
  }

  // If the widget type is "autocomplete" or "autocomplete tags"...
  elseif (in_array($field_instance['widget']['type'], array('entityreference_autocomplete', 'entityreference_autocomplete_tags'))) {

    // Build a list of asset labels in the format that the widget expects.
    $asset_labels = array();
    foreach ($assets as $asset) {
      $asset_labels[] = entity_label('farm_asset', $asset) . ' (' . $asset->id . ')';
    }

    // For "autocomplete", add each one as a separate field.
    if ($field_instance['widget']['type'] == 'entityreference_autocomplete') {
      foreach ($asset_labels as $key => $label) {

        // If the item isn't empty, skip it.
        if (!empty($form[$field_name][LANGUAGE_NONE][$key]['target_id']['#default_value'])) {
          continue;
        }

        /**
         * @todo
         * This seems to be the easiest way to autopopulate entityreference_autocomplete
         * widgets, but it is MESSY! If anyone can figure out a better way, I will buy
         * you a beer.
         */
        // Copy the initial array structure from the first element.
        $form[$field_name][LANGUAGE_NONE][$key] = $form[$field_name][LANGUAGE_NONE][0];

        // Set the default, delta, and weight values.
        $form[$field_name][LANGUAGE_NONE][$key]['target_id']['#default_value'] = $label;
        $form[$field_name][LANGUAGE_NONE][$key]['target_id']['#delta'] = $key;
        $form[$field_name][LANGUAGE_NONE][$key]['target_id']['#weight'] = $key;

        // Only make the first one required.
        if ($key > 0) {
          $form[$field_name][LANGUAGE_NONE][$key]['target_id']['#required'] = 0;
        }

        $form[$field_name][LANGUAGE_NONE]['#max_delta'] = $key;
        $form[$field_name][LANGUAGE_NONE][$key]['_weight']['#delta'] = $key;
        $form[$field_name][LANGUAGE_NONE][$key]['_weight']['#default_value'] = $key;
      }
    }

    // For "autocomplete tags", implode them all into one comma-separated list.
    elseif ($field_instance['widget']['type'] == 'entityreference_autocomplete_tags') {
      if (empty($form[$field_name][LANGUAGE_NONE]['#default_value'])) {
        $form[$field_name][LANGUAGE_NONE]['#default_value'] = implode(', ', $asset_labels);
      }
    }
  }

  // If the widget type is "entity reference view widget"...
  elseif ($field_instance['widget']['type'] == 'entityreference_view_widget') {

    // Add a set of checkbox form elements, as the entityreference_view_widget
    // module expects...
    foreach ($assets as $key => $asset) {

      // If the item isn't empty, skip it.
      if (!empty($form[$field_name][LANGUAGE_NONE][$key]['target_id'])) {
        continue;
      }

      // Add the checkbox element.
      $form[$field_name][LANGUAGE_NONE][$key]['target_id'] = array(
        '#type' => 'checkbox',
        '#return_value' => $asset->id,
        '#value' => $asset->id,
        '#title_display' => 'after',
        '#attributes' => array(
          'checked' => 'checked',
        ),
        '#title' => entity_label('farm_asset', $asset),
      );
    }
  }

  return $assets;
}

/**
 * Helper function for enabling area prepopulation in log forms.
 *
 * @param array $form
 *   The form array to modify, passed by reference.
 * @param string $field_name
 *   The machine name of the term reference field that should be populated.
 *
 * @return TaxonomyTerm term
 *   Returns the taxonomy term object, if found.
 */
function farm_log_form_prepopulate_area(array &$form, $field_name = 'field_farm_area') {
  $area = NULL;

  // Alias for the field's default value.
  $field_value = &$form[$field_name][LANGUAGE_NONE]['#default_value'];

  // If the "farm_area" query parameter is set...
  $params = drupal_get_query_parameters();
  if (!empty($params['farm_area'])) {

    // Verify that the farm_area is valid.
    $area = taxonomy_term_load($params['farm_area']);
    if ($area) {

      // Add the area to the form.
      $form['farm_area'] = array(
        '#type' => 'value',
        '#value' => $area,
      );

      // Prepopulate the area reference field.
      if (empty($field_value)) {
        $field_value = entity_label('taxonomy_term', $area);
      }
    }
  }

  return $area;
}
