<?php
/**
 * @file
 * Farm Manager role and permission management.
 */

/**
 * Synchronize all available farm permissions to the Farm Manager role.
 */
function farm_manager_sync_perms() {

  // Compare current perms to available perms.
  $compare = farm_manager_compare_perms();

  // Add perms.
  if (!empty($compare['add'])) {
    foreach ($compare['add'] as $perm) {
      $changes[$perm] = TRUE;
    }
  }

  // Remove perms.
  if (!empty($compare['remove'])) {
    foreach ($compare['remove'] as $perm) {
      $changes[$perm] = FALSE;
    }
  }

  // If there are changes to be made...
  if (!empty($changes)) {

    // Load the Farm Manager role.
    $role = user_role_load_by_name('Farm Manager');

    // Apply the changes.
    user_role_change_permissions($role->rid, $changes);
  }
}

/**
 * Gets a list of all available farm permissions.
 *
 * @return array
 *   Returns an array of permission strings.
 */
function farm_manager_available_perms() {

  // Load the permissions provided by this module on behalf of others.
  module_load_include('inc', 'farm_manager', 'farm_manager.modules');

  // Invoke hook_farm_manager_perms() to allow modules to provide permissions.
  $perms = module_invoke_all('farm_manager_perms');

  // Unset any that don't exist.
  // This can be an issue with Taxonomies provided by Features.
  $permissions_modules = user_permission_get_modules();
  foreach ($perms as $key => $perm) {
    if (empty($permissions_modules[$perm])) {
      unset($perms[$key]);
    }
  }

  // Return them.
  return $perms;
}

/**
 * Gets a list of the permissions currently assigned to the Farm Manager role.
 *
 * @return array
 *   Returns an array of permission strings.
 */
function farm_manager_current_perms() {

  // Load the Farm Manager role.
  $role = user_role_load_by_name('Farm Manager');

  // Load the permissions that are currently assigned to the role.
  $perms = user_role_permissions(array($role->rid => $role->name));

  // Return the permissions for this role, as an array of strings.
  return array_keys($perms[$role->rid]);
}

/**
 * Compares available permissions to actual permissions.
 *
 * @return array
 *   Returns an array with two sub-arrays:
 *     'add': a list of permission strings that should be added
 *     'remove': a list of permission strings that should be removed
 */
function farm_manager_compare_perms() {

  // Get the available perms.
  $available_perms = farm_manager_available_perms();

  // Get the currently applied perms.
  $current_perms = farm_manager_current_perms();

  // Determine which perms should be added.
  $compare['add'] = array_diff($available_perms, $current_perms);

  // Determine which perms should be removed.
  $compare['remove'] = array_diff($current_perms, $available_perms);

  // Return the comparison.
  return $compare;
}

/**
 * Generate permission lists for specific farm assets, logs, and taxonomies.
 * This is a helper function to make the task of generating permission lists
 * easier.
 *
 * @param $types
 *   An array of entity types/bundles to generate permissions for. Example:
 *     $types = array(
 *       'taxonomy' => array(
 *         'farm_areas',
 *       ),
 *     );
 *
 * @return array
 *   Returns a list of permissions for the given entity type+bundle.
 */
function farm_manager_entity_perms($types) {

  // Start with an empty array.
  $perms = array();

  // Iterate through the types.
  foreach ($types as $type => $bundles) {

    // Iterate through the bundles.
    foreach ($bundles as $bundle) {

      // Switch through available entity types.
      switch ($type) {

        // Farm Asset
        case 'farm_asset':
          $perms[] = 'create ' . $bundle . ' farm assets';
          $perms[] = 'delete any ' . $bundle . ' farm assets';
          $perms[] = 'delete own ' . $bundle . ' farm assets';
          $perms[] = 'edit any ' . $bundle . ' farm assets';
          $perms[] = 'edit own ' . $bundle . ' farm assets';
          $perms[] = 'view any ' . $bundle . ' farm assets';
          $perms[] = 'view own ' . $bundle . ' farm assets';
          break;

        // Log
        case 'log':
          $perms[] = 'create ' . $bundle . ' log entities';
          $perms[] = 'delete any ' . $bundle . ' log entities';
          $perms[] = 'delete own ' . $bundle . ' log entities';
          $perms[] = 'edit any ' . $bundle . ' log entities';
          $perms[] = 'edit own ' . $bundle . ' log entities';
          $perms[] = 'view any ' . $bundle . ' log entities';
          $perms[] = 'view own ' . $bundle . ' log entities';
          break;

        // Taxonomy
        case 'taxonomy':
          $perms[] = 'delete terms in ' . $bundle;
          $perms[] = 'edit terms in ' . $bundle;
          break;
      }
    }
  }

  // Return the permissions.
  return $perms;
}

/**
 * Implements hook_modules_enabled().
 */
function farm_manager_modules_enabled($modules) {

  // Load a list of modules that implement this module's hook_farm_manager_perms().
  $implementations = module_implements('farm_manager_perms');

  // If one of the modules being enabled implements hook_farm_manager_perms(),
  // sync permissions.
  if (array_intersect($modules, $implementations)) {
    farm_manager_sync_perms();
  }
}

/**
 * Implements hook_form_alter().
 */
function farm_manager_form_alter(&$form, &$form_state, $form_id) {

  // Add our submit function to the core permissions form.
  if ($form_id == 'user_admin_permissions') {
    $form['#submit'][] = 'farm_manager_permissions_form_submit';
  }
}

/**
 * Submit function for the core permissions form.
 * Syncs Farm Manager role permissions.
 */
function farm_manager_permissions_form_submit($form, &$form_state) {

  // Sync permissions.
  farm_manager_sync_perms();

  // Tell the user that we are enforcing the permissions, so there's no confusion.
  drupal_set_message(t('Farm Manager permissions were automatically assigned.'));
}

/**
 * Implements hook_farm_manager_perms().
 */
function farm_manager_farm_manager_perms() {

  // We implement our own hook here to provide some core permissions.
  $perms = array();

  // This is needed to add terms.
  $perms[] = 'administer taxonomy';

  // This is needed to view terms.
  $perms[] = 'access content';

  return $perms;
}

/**
 * Implements hook_flush_caches().
 */
function farm_manager_flush_caches() {

  // Sync permissions when the cache is cleared.
  farm_manager_sync_perms();
}
