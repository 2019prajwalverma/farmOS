<?php
/**
 * @file
 * Code for the Farm Sensor Listener module.
 */

/**
 * Implements hook_menu().
 */
function farm_sensor_listener_menu() {
  $items = array();
  $items['farm/sensor/listener'] = array(
    'page callback' => 'farm_sensor_listener_page_callback',
    'access callback' => 'farm_sensor_listener_access_callback',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Access callback /farm/sensor/listener.
 */
function farm_sensor_listener_access_callback() {

  /**
   * @todo
   * Change this to use HMAC authentication instead of Drupal user login.
   */

  // Load the username and password from PHP basic authentication.
  $username = $_SERVER['PHP_AUTH_USER'];
  $password = $_SERVER['PHP_AUTH_PW'];

  // If either are empty, deny access.
  if (empty($username) || empty($password)) {
    return FALSE;
  }

  // Attempt to authenticate the user, and grant access if it worked.
  if (user_authenticate($username, $password)) {
    return TRUE;
  }

  // If all else failed, deny access.
  return FALSE;
}


/**
 * Callback function for receiving JSON over HTTP and storing data to the {farm_sensor_data} table.
 *
 * JSON should be in the following format:
 *   {
 *     'id': 123abc456def,
 *     'timestamp: 1234567890,
 *     'name': 'sensor1',
 *     'value': 76.5
 *   }
 * Where:
 *   id = The public key of the sensor (automatically generated in the sensor
 *     settings form).
 *   timestamp = The timestamp of the sensor reading. This is optional, and if
 *     omitted will be automatically filled in with the current time.
 *   name = The sub-name of the sensor reading. This is used for sensor devices
 *     that are taking multiple different readings.
 *   value = The value of the sensor reading, in decimal form.
 */
function farm_sensor_listener_page_callback() {

  // Pull the data from the request.
  $data = drupal_json_decode(file_get_contents("php://input"));

  // Ensure that all the necessary keys are set.
  if (empty($data['id']) || empty($data['name']) || !isset($data['value'])) {
    return;
  }

  // If the timestamp is empty, populate it with the current time.
  if (empty($data['timestamp'])) {
    $data['timestamp'] = REQUEST_TIME;
  }

  // Look up the sensor by it's public key.
  $sensor = farm_sensor_listener_load($data['id']);

  // If no asset was found, bail.
  if (empty($sensor)) {
    return;
  }

  // Enter the reading into the {farm_sensor_data} table.
  drupal_write_record('farm_sensor_data', $data);
}

/**
 * Implements hook_farm_sensor_type_info().
 */
function farm_sensor_listener_farm_sensor_type_info() {
  return array(
    'listener' => array(
      'label' => t('Listener'),
      'description' => t('Open up a data listener that accepts data from
      external sources over HTTP'),
      'form' => 'farm_sensor_listener_settings_form',
    ),
  );
}

/**
 * Settings form for listener sensor.
 *
 * @param array $settings
 *   The farm sensor settings.
 *
 * @return array
 *   Returns a form with settings for this  Listener sensor.
 */
function farm_sensor_listener_settings_form($settings = array()) {

  // Automatically generated public key.
  $form['public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Public key'),
    '#description' => t('An automatically generated public key for this sensor.'),
    '#default_value' => !empty($settings['public_key']) ? $settings['public_key'] : hash('md5', mt_rand()),
  );

  // Automatically generated private key.
  $form['private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Private key'),
    '#description' => t('An automatically generated private key for this sensor.'),
    '#default_value' => !empty($settings['private_key']) ? $settings['private_key'] : hash('md5', mt_rand()),
  );

  return $form;
}

/**
 * Implements hook_views_api().
 */
function farm_sensor_listener_views_api() {
  return array('api' => 3);
}

/**
 * Helper function for loading a sensor asset from it's public/private key.
 *
 * @param $key
 *   The sensor public/private key.
 *
 * @return FarmAsset|bool
 *   Returns a farm sensor asset, or FALSE if not found.
 */
function farm_sensor_listener_load($key) {

  // Query the {farm_sensor} table to look for a sensor with a matching key.
  $sql = 'SELECT id FROM {farm_sensor} WHERE settings LIKE :settings';
  $result = db_query($sql, array(':settings' => '%' . db_like($key) . '%'));
  $asset_id = $result->fetchField();

  // If no asset id was found, bail.
  if (empty($asset_id)) {
    return FALSE;
  }

  // Attempt to load the sensor asset.
  $asset = farm_asset_load($asset_id);

  // If a sensor wasn't loaded, bail.
  if (empty($asset)) {
    return FALSE;
  }

  // Return the sensor asset.
  return $asset;
}
