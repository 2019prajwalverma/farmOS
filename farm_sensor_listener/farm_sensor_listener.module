<?php
/**
 * @file
 * Code for the Farm Sensor Listener module.
 */

/**
 * Implements hook_menu().
 */
function farm_sensor_listener_menu() {
  $items = array();
  $items['farm/sensor/listener'] = array(
    'page callback' => 'farm_sensor_listener_page_callback',
    'access callback' => 'farm_sensor_listener_access_callback',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Access callback /farm/sensor/listener.
 */
function farm_sensor_listener_access_callback() {

  /**
   * @todo
   * Change this to use HMAC authentication instead of Drupal user login.
   */

  // Load the username and password from PHP basic authentication.
  $username = $_SERVER['PHP_AUTH_USER'];
  $password = $_SERVER['PHP_AUTH_PW'];

  // If either are empty, deny access.
  if (empty($username) || empty($password)) {
    return FALSE;
  }

  // Attempt to authenticate the user, and grant access if it worked.
  if (user_authenticate($username, $password)) {
    return TRUE;
  }

  // If all else failed, deny access.
  return FALSE;
}


/**
 * Callback function for receiving JSON over HTTP and storing data to the {farm_sensor_data} table.
 *
 * JSON should be in the following format:
 *   {
 *     'id': 123,
 *     'timestamp: 1234567890,
 *     'name': 'sensor1',
 *     'value': 76.5
 *   }
 */
function farm_sensor_listener_page_callback() {

  // Pull the data from the request.
  $data = drupal_json_decode(file_get_contents("php://input"));

  // Ensure that all the necessary keys are set.
  if (empty($data['id']) || empty($data['name']) || !isset($data['value'])) {
    return;
  }

  // If the timestamp is empty, populate it with the current time.
  if (empty($data['timestamp'])) {
    $data['timestamp'] = REQUEST_TIME;
  }

  // Look up the sensor by asset id.
  $sensor = farm_asset_load($data['id']);

  // If no asset was found, bail.
  if (empty($sensor)) {
    return;
  }

  // Enter the reading into the {farm_sensor_data} table.
  drupal_write_record('farm_sensor_data', $data);
}

/**
 * Implements hook_farm_sensor_type_info().
 */
function farm_sensor_listener_farm_sensor_type_info() {
  return array(
    'listener' => array(
      'label' => t('Listener'),
      'description' => t('Open up a data listener that accepts data from
      external sources over HTTP'),
    ),
  );
}
