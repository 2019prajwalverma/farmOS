<?php
/**
 * @file
 * Farm area import module.
 */

/**
 * Implements hook_permission().
 */
function farm_area_import_permission() {
  return array(
    'use farm area importer' => array(
      'title' => t('Use farm area importer tool'),
      'description' => t('Use the farm area importer tool.'),
    ),
  );
}

/**
 * Implements hook_farm_access_perms().
 */
function farm_area_import_farm_access_perms($role) {

  // Grant area generator access to Farm Managers.
  if ($role == 'Farm Manager') {
    return array('use farm area importer');
  }
  else {
    return array();
  }
}

/**
 * Implements hook_menu().
 */
function farm_area_import_menu() {

  // Area generator form.
  $items['farm/areas/import'] = array(
    'title' => 'Area importer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_area_import_form'),
    'access arguments' => array('use farm area importer'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Area import form.
 */
function farm_area_import_form($form, &$form_state) {

  // Set the page title.
  drupal_set_title('Area importer');

  // Create a fieldset for input.
  $form['input'] = array(
    '#type' => 'fieldset',
    '#title' => t('Input'),
  );

  // KML text area.
  $form['input']['kml'] = array(
    '#type' => 'textarea',
    '#title' => t('KML'),
    '#description' => t('Paste the contents of your KML file here and click "Parse".'),
    '#required' => TRUE,
  );

  // Parse button.
  $form['input']['parse'] = array(
    '#type' => 'submit',
    '#value' => t('Parse'),
    '#submit' => array('farm_area_import_form_parse'),
    '#ajax' => array(
      'callback' => 'farm_area_import_form_ajax',
      'wrapper' => 'output',
    ),
  );

  // Create a wrapper for the output.
  $form['output'] = array(
    '#tree' => TRUE,
    '#prefix' => '<div id="output">',
    '#suffix' => '</div>',
  );

  // If a file has not been uploaded, return the form.
  if (empty($form_state['values']['kml'])) {
    return $form;
  }

  // Make the output wrapper into a fieldset.
  $form['output']['#type'] = 'fieldset';
  $form['output']['#title'] = t('Output');

  // Parse the KML into an array of geometries.
  $geometries = farm_area_import_parse_kml_geometries($form_state['values']['kml']);

  // Iterate through the geometries and add form fields for each.
  foreach ($geometries as $i => $geometry) {

    // Create a simple fieldset for the geometry.
    $form['output'][$i] = array(
      '#type' => 'fieldset',
      '#title' => t('Geometry') . ' ' . ($i + 1),
    );

    // Get the placemark name and put it in a text field.
    $form['output'][$i]['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#default_value' => $geometry['name'],
    );

    // Area type select.
    $form['output'][$i]['type'] = array(
      '#type' => 'select',
      '#title' => t('Area type'),
      '#options' => farm_area_type_options(),
      '#default_value' => 'field',
    );

    // Get the placemark description and put it in a text field.
    $form['output'][$i]['description'] = array(
      '#type' => 'textarea',
      '#title' => t('Description'),
      '#default_value' => $geometry['description'],
    );

    // Add a text area for the geometry data.
    $form['output'][$i]['geometry'] = array(
      '#type' => 'textarea',
      '#title' => t('Geometry'),
      '#default_value' => $geometry['wkt'],
    );

    // Checkbox for creating the area.
    $form['output'][$i]['confirm'] = array(
      '#type' => 'checkbox',
      '#title' => t('Create this area'),
      '#description' => t('Uncheck this if you do not want to create this area in farmOS.'),
      '#default_value' => TRUE,
    );
  }

  // Submit button.
  $form['output']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create areas'),
    '#validate' => array('farm_area_import_form_create_validate'),
    '#submit' => array('farm_area_import_form_create_submit'),
  );

  return $form;
}

/**
 * Area importer form ajax callback.
 */
function farm_area_import_form_ajax($form, &$form_state) {
  return $form['output'];
}

/**
 * Area importer parse button submit.
 */
function farm_area_import_form_parse(&$form, &$form_state) {
  $form_state['input'] = array();
  $form_state['rebuild'] = TRUE;
}

/**
 * Area importer form validation.
 */
function farm_area_import_form_create_validate(&$form, &$form_state) {

  // Iterate through the submitted values.
  foreach ($form_state['values']['output'] as $key => $values) {

    // If the confirmation checkbox is not checked, skip.
    if (empty($values['confirm'])) {
      continue;
    }

    // Prevent empty values.
    $fields = array(
      'name',
      'type',
      'geometry',
    );
    foreach ($fields as $field) {
      if (empty($values[$field])) {
        form_set_error('output][' . $key . '][' . $field, t('The %field field is required on geometry @num', array('%field' => $field, '@num' => $key + 1)));
      }
    }

    // Validate the geometry using the geofield function.
    $error = geofield_validate_geom(array('geom' => $values['geometry']));
    if (!empty($error)) {
      form_set_error('output][' . $key . '][geometry', t('Geometry @num is invalid.', array('@num' => $key + 1)));
    }
  }
}

/**
 * Area importer form submit.
 */
function farm_area_import_form_create_submit(&$form, &$form_state) {

  // Load the Areas vocabulary.
  $vocab = taxonomy_vocabulary_machine_name_load('farm_areas');

  // Iterate through the submitted values.
  foreach ($form_state['values']['output'] as $values) {

    // If the confirmation checkbox is not checked, skip.
    if (empty($values['confirm'])) {
      continue;
    }

    // Create the new area.
    $area = new stdClass();
    $area->name = $values['name'];
    $area->description = $values['description'];
    $area->vid = $vocab->vid;
    $area->field_farm_area_type[LANGUAGE_NONE][0]['value'] = $values['type'];
    $area->field_farm_geofield[LANGUAGE_NONE][0]['geom'] = $values['geometry'];
    taxonomy_term_save($area);

    // Display a message with a link to the new area.
    $area_label = entity_label('taxonomy_term', $area);
    $area_uri = entity_uri('taxonomy_term', $area);
    drupal_set_message(t('Area created: <a href="@path">@label</a>', array('@path' => url($area_uri['path']), '@label' => $area_label)));
  }
}

/**
 * Helper function for converting KML to a set of geometries.
 *
 * @param string $kml
 *   The KML string to parse.
 *
 * @return array
 *   Returns an array of geometries, with name, description, and WKT for each.
 */
function farm_area_import_parse_kml_geometries($kml) {

  // Start an array to hold the geometries.
  $geometries = array();

  // Load the GeoPHP library.
  geophp_load();

  // Parse the KML into an XML object.
  $xml = simplexml_load_string($kml);

  // Determine the root element. Sometimes it is "Document".
  $root = $xml;
  if (isset($xml->Document)) {
    $root = $xml->Document;
  }

  // If the KML file is organized into folders, iterate through them.
  if (isset($root->Folder)) {
    $folders = $folders = $root->Folder;
    foreach ($folders as $folder) {

      // Iterate through the KML Placemarks and parse their geometry info.
      $placemarks = $folder->Placemark;
      foreach ($placemarks as $placemark) {
        $geometries[] = farm_area_import_parse_kml_placemark($placemark);
      }
    }
  }

  // Or, just iterate through the KML placemarks and parse their geometry info.
  else {
    $placemarks = $root->Placemark;
    foreach ($placemarks as $placemark) {
      $geometries[] = farm_area_import_parse_kml_placemark($placemark);
    }
  }

  // Return the geometries.
  return $geometries;
}

/**
 * @param $placemark
 *   A SimpleXML Placemark object.
 *
 * @return array
 *   Returns information about the placemark, including name, description, and
 *   geometry in Well-Known Text (WKT).
 */
function farm_area_import_parse_kml_placemark($placemark) {

  // Start a new array for the geometry info.
  $geometry = array();

  // Get the placemark name as a string.
  $geometry['name'] = (string) $placemark->name;

  // Get the placemark description as a string.
  $geometry['description'] = (string) $placemark->description;

  // Parse the placemark into a GeoPHP geometry object.
  $placemark_xml = $placemark->asXML();
  $geophp_geometry = geoPHP::load($placemark_xml, 'kml');

  // Convert the geometry to WKT.
  $geometry['wkt'] = $geophp_geometry->out('wkt');

  // Return the geometry.
  return $geometry;
}
