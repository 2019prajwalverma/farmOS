<?php
/**
 * @file
 * Code for the Farm Group feature.
 */

include_once 'farm_group.features.inc';

/**
 * Implements hook_farm_ui_entities().
 */
function farm_group_farm_ui_entities() {
  return array(
    'farm_asset' => array(
      'group' => array(
        'label' => t('Group'),
        'label_plural' => t('Groups'),
        'view' => 'farm_groups',
      ),
    ),
  );
}

/**
 * Implements hook_farm_ui_entity_views().
 */
function farm_group_farm_ui_entity_views($entity_type, $bundle, $entity) {
  $views = array();

  // Add Views to assets.
  if ($entity_type == 'farm_asset') {

    // Add group membership log View at the bottom of assets.
    $views[] = array(
      'name' => 'farm_group_log',
      'group' => 'logs_special',
      'weight' => 100,
    );

    // If the asset is a group, add View of group members.
    if ($bundle == 'group') {
      $views[] = array(
        'name' => 'farm_group_members',
        'display' => 'page',
        'title' => t('Group members'),
        'group' => 'assets',
        'weight' => -100,
        'always' => TRUE,
      );
    }
  }

  return $views;
}

/**
 * Implements hook_entity_view_alter().
 */
function farm_group_entity_view_alter(&$build, $type) {

  // If it's not a farm_asset, or if the entity object is not available, bail.
  if ($type != 'farm_asset' || empty($build['#entity'])) {
    return;
  }

  // Get the asset's group membership.
  $membership = farm_group_asset_membership($build['#entity']);

  // If no group membership information was found, bail.
  if (empty($membership)) {
    return;
  }

  // Start an output string.
  $output = '<strong>' . t('Group membership') . ':</strong> ';

  // Iterate through the group memberships and add links to them.
  $group_links = array();
  foreach ($membership as $group) {
    $uri = entity_uri('farm_asset', $group);
    if (!empty($uri['path'])) {
      $group_links[] = l(entity_label('farm_asset', $group), $uri['path']);
    }
  }
  $output .= implode(', ', $group_links);

  // Add it to the build array.
  $build['group'] = array(
    '#markup' => $output,
    '#weight' => -110,
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function farm_group_form_log_form_alter(&$form, &$form_state, $form_id) {

  // If this log form contains field_farm_group, add validation.
  if (!empty($form['field_farm_group'])) {
    $form['#validate'][] = 'farm_group_field_farm_group_validate';
  }
}

/**
 * Validation callback for the field_farm_group field in logs.
 */
function farm_group_field_farm_group_validate($form, &$form_state) {

  // If there are no groups referenced in the log, bail.
  if (empty($form_state['values']['field_farm_group'][LANGUAGE_NONE])) {
    return;
  }

  // If there are no assets referenced in the log, warn the user.
  if (empty($form_state['values']['field_farm_asset'][LANGUAGE_NONE])) {
    form_set_error('field_farm_asset', t('No asset(s) have been selected to become members of the group(s). Please select asset(s) or remove the group(s).'));
  }

  // Build an array of asset IDs.
  $asset_ids = array();
  foreach ($form_state['values']['field_farm_asset'][LANGUAGE_NONE] as $reference) {
    if (!empty($reference['target_id'])) {
      $asset_ids[] = $reference['target_id'];
    }
  }

  // Build an array of group IDs.
  $group_ids = array();
  foreach ($form_state['values']['field_farm_group'][LANGUAGE_NONE] as $reference) {
    if (!empty($reference['target_id'])) {
      $group_ids[] = $reference['target_id'];
    }
  }

  // Iterate through the selected groups and assets to check for possible
  // circular membership.
  foreach ($group_ids as $group_id) {
    foreach ($asset_ids as $asset_id) {

      // Load the group and asset.
      $group = farm_asset_load($group_id);
      $asset = farm_asset_load($asset_id);

      // Check for a circular membership.
      $circular = farm_group_circular_membership($group, $asset);

      // If a circular membership is detected, warn the user.
      if ($circular) {

        // Get the URI information for the group and asset.
        $group_uri = entity_uri('farm_asset', $group);
        $asset_uri = entity_uri('farm_asset', $asset);

        // Create links to the asset and group.
        $group_link = l(entity_label('farm_asset', $group), $group_uri['path']);
        $asset_link = l(entity_label('farm_asset', $asset), $asset_uri['path']);

        // Set an error on the asset field and describe which asset and group
        // would create the circular membership.
        form_set_error('field_farm_asset', t('The asset "!asset_link" cannot be added to the group "!group_link" because it would create a circular membership.', array('!asset_link' => $asset_link, '!group_link' => $group_link)));
      }
    }
  }
}

/**
 * Load groups that an asset is a member of.
 *
 * @param FarmAsset $asset
 *   The farm_asset object to look for.
 * @param int $time
 *   Unix timestamp limiter. Only logs before this time will be included.
 *   Defaults to the current time. Set to 0 to load the absolute last.
 * @param bool $done
 *   Whether or not to only show logs that are marked as "done".
 *   Defaults to TRUE.
 *
 * @return array
 *   Returns an array of groups that the asset is a member of.
 */
function farm_group_asset_membership(FarmAsset $asset, $time = REQUEST_TIME, $done = TRUE) {
  $groups = array();

  // Load the log using our helper function.
  $log = farm_group_asset_latest_membership($asset, $time, $done);

  // If no groups are specified, bail.
  if (empty($log->field_farm_group[LANGUAGE_NONE])) {
    return $groups;
  }

  // Iterate through the referenced groups and load them.
  if (!empty($log->field_farm_group[LANGUAGE_NONE])) {
    foreach ($log->field_farm_group[LANGUAGE_NONE] as $group_reference) {
      if (!empty($group_reference['target_id'])) {
        $group = farm_asset_load($group_reference['target_id']);
        if (!empty($group)) {
          $groups[] = $group;
        }
      }
    }
  }
  return $groups;
}

/**
 * Load an asset's latest log that defines a group membership.
 *
 * @param FarmAsset $asset
 *   The farm_asset object to look for.
 * @param int $time
 *   Unix timestamp limiter. Only logs before this time will be included.
 *   Defaults to the current time. Set to 0 to load the absolute last.
 * @param bool $done
 *   Whether or not to only show logs that are marked as "done". Defaults to
 *   TRUE.
 *
 * @return Log|bool
 *   Returns a log entity. FALSE if something goes wrong.
 */
function farm_group_asset_latest_membership(FarmAsset $asset, $time = REQUEST_TIME, $done = TRUE) {

  /**
   * Please read the comments in farm_group_asset_membership_query() to
   * understand how this works, and to be aware of the limitations and
   * responsibilities we have in this function with regard to sanitizing query
   * inputs.
   */

  // If the asset doesn't have an ID (for instance if it is new and hasn't been
  // saved yet), bail.
  if (empty($asset->id)) {
    return FALSE;
  }

  // Make a query for loading the latest group membership log.
  $query = farm_group_asset_membership_query($asset->id, $time, $done);

  // Execute the query and gather the log id.
  $result = $query->execute();
  $log_id = $result->fetchField();

  // If a log id exists, load and return it.
  if (!empty($log_id)) {
    return log_load($log_id);
  }
  return FALSE;
}

/**
 * Build a query to find group membership logs of a specific asset.
 *
 * @param int|string $asset_id
 *   The asset id to search for. This can either be a specific id, or a field
 *   alias string from another query (ie: 'mytable.assetid'). For an example
 *   of field alias string usage, see the Views relationship handler code in
 *   farm_group_handler_relationship_membership::query().
 * @param int $time
 *   Unix timestamp limiter. Only logs before this time will be included.
 *   Defaults to the current time. Set to 0 to load the absolute last.
 * @param bool $done
 *   Whether or not to only show logs that are marked as "done". Defaults to
 *   TRUE.
 * @param bool $single
 *   Whether or not to limit the query to a single result. Defaults to TRUE.
 *
 * @return \SelectQuery
 *   Returns a SelectQuery object.
 */
function farm_group_asset_membership_query($asset_id, $time = REQUEST_TIME, $done = TRUE, $single = TRUE) {

  /**
   * Please read the comments in farm_log_asset_query() to understand how this
   * works, and to be aware of the limitations and responsibilities we have in
   * this function with regard to sanitizing query inputs.
   */

  // Use the farm_log_asset_query() helper function to start a query object.
  $query = farm_log_asset_query($asset_id, $time, $done, $single);

  // Join in the log's "group" field, and filter to only include logs that have
  // a "group" value defined.
  $query->join('field_data_field_farm_group', 'ss_fdffg', "ss_fdffg.entity_type = 'log' AND ss_fdffg.entity_id = ss_log.id AND ss_fdffg.deleted = 0");
  $query->where('ss_fdffg.field_farm_group_target_id IS NOT NULL');

  // Add the log ID field.
  $query->addField('ss_log', 'id');

  // Return the query object.
  return $query;
}

/**
 * Load all members of a group.
 *
 * @param FarmAsset $group
 *   The group to load members from.
 * @param int $time
 *   Unix timestamp limiter. Only logs before this time will be included.
 *   Defaults to the current time. Set to 0 to load the absolute last.
 * @param bool $done
 *   Whether or not to only show logs that are marked as "done".
 *   Defaults to TRUE.
 *
 * @return array
 *   Returns an array of the group's member assets, keyed by asset ID.
 */
function farm_group_members(FarmAsset $group, $time = REQUEST_TIME, $done = TRUE) {

  // Start an empty array of members.
  $members = array();

  // If the group doesn't have an id, bail.
  if (empty($group->id)) {
    return $members;
  }

  // Build a query to find all members of the group.
  $query = farm_group_members_query($group->id, $time, $done);

  // Join in asset references.
  $query->join('field_data_field_farm_asset', 'ss_fdffa', "ss_fdffa.entity_type = 'log' AND ss_fdffa.entity_id = ss_log.id AND ss_fdffa.deleted = 0");

  // Add the asset ID field.
  $query->addField('ss_fdffa', 'field_farm_asset_target_id', 'asset_id');

  // Execute the query to get a list of asset IDs.
  $result = $query->execute();

  // Iterate through the results.
  foreach ($result as $row) {

    // If the asset ID is empty, skip it.
    if (empty($row->asset_id)) {
      continue;
    }

    // If the asset has already been loaded, skip it.
    if (array_key_exists($row->asset_id, $members)) {
      continue;
    }

    // Load the asset.
    $members[$row->asset_id] = farm_asset_load($row->asset_id);
  }

  // Return the array of members.
  return $members;
}

/**
 * Build a query to find membership logs for a specific group.
 *
 * @param int $group_id
 *   The group's asset id to search for.
 * @param int $time
 *   Unix timestamp limiter. Only logs before this time will be included.
 *   Defaults to the current time. Set to 0 to load the absolute last.
 * @param bool $done
 *   Whether or not to only show logs that are marked as "done". Defaults to
 *   TRUE.
 *
 * @return \SelectQuery
 *   Returns a SelectQuery object.
 */
function farm_group_members_query($group_id, $time = REQUEST_TIME, $done = TRUE) {

  /**
   * Please read the comments in farm_log_query() to understand how this works,
   * and to be aware of the limitations and responsibilities we have in this
   * function with regard to sanitizing query inputs.
   */

  // Ensure $group_id is valid, because it will be used directly in the query
  // string. This is defensive code. See note about farm_log_query() above.
  if (!is_int($group_id) || $group_id < 0) {
    $group_id = db_escape_field($group_id);
  }

  // Use the farm_log_query() helper function to start a query object. Do not
  // limit the results to a single row because by the very nature of this we
  // want to find all assets in the group, which may come from multiple logs.
  $query = farm_log_query($time, $done, FALSE);

  // Join in the log's "group" field, and filter to only include logs that
  // reference the specified group.
  $query->join('field_data_field_farm_group', 'ss_fdffg', "ss_fdffg.entity_type = 'log' AND ss_fdffg.entity_id = ss_log.id AND ss_fdffg.deleted = 0");
  $query->where('ss_fdffg.field_farm_group_target_id = ' . $group_id);

  // Return the query object.
  return $query;
}

/**
 * Recursively check for circular group membership.
 *
 * @param FarmAsset $group
 *   The group that the asset will be added to.
 * @params FarmAsset $asset
 *   The asset being considered for membership in the group.
 *
 * @return bool
 *   Returns TRUE if a circular dependency would exist if the asset became a
 *   member of the group, FALSE otherwise.
 */
function farm_group_circular_membership(FarmAsset $group, FarmAsset $asset) {

  // A group can't be inside itself. This is primarily how we will check for
  // circular membership, along with recursively checking parent groups below.
  if ($group->id == $asset->id) {
    return TRUE;
  }

  // Check to see if the group is a member of other groups.
  $parent_groups = farm_group_asset_membership($group);

  // If no parent groups were found, no circular membership can exist.
  if (empty($parent_groups)) {
    return FALSE;
  }

  // Iterate through the parent groups and recurse into them to check if the
  // new asset will create a circular membership anywhere down the line.
  foreach ($parent_groups as $parent_group) {
    if (farm_group_circular_membership($parent_group, $asset)) {
      return TRUE;
    }
  }

  // Ok we're good! No circular memberships detected!
  return FALSE;
}
