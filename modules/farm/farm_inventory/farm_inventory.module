<?php

/**
 * @file
 * Farm inventory module.
 */

/**
 * Implements hook_entity_view_alter().
 */
function farm_inventory_entity_view_alter(&$build, $type) {

  // If it's not a farm_asset, or if the entity object is not available, bail.
  if ($type != 'farm_asset' || empty($build['#entity'])) {
    return;
  }

  // Alias the asset variable.
  $asset = $build['#entity'];

  // If inventory management is not enabled for this asset, bail.
  if (!farm_inventory_enabled($asset)) {
    return;
  }

  // Get the asset's inventory.
  $inventory = farm_inventory($asset);

  // Build the inventory display.
  $output = '<strong>' . t('Inventory') . ':</strong> ' . $inventory;

  // Add it to the build array.
  $build['inventory'] = array(
    '#markup' => $output,
    '#weight' => -90,
  );
}

/**
 * Implements hook_entity_load().
 */
function farm_inventory_entity_load($entities, $type) {

  // Only act on farm_asset_type entities.
  if ($type != 'farm_asset_type') {
    return;
  }

  // Load asset type inventory settings.
  $settings = array();
  $result = db_query('SELECT * FROM {farm_inventory_asset_type}');
  foreach ($result as $row) {
    if (!empty($row->type)) {
      $settings[$row->type] = array(
        'enabled' => $row->enabled,
        'individual' => $row->individual,
      );
    }
  }

  // Iterate through the entities and add inventory settings.
  foreach ($entities as $entity) {

    // Get the asset type machine name.
    $asset_type = $entity->type;

    // If settings are available for the entity's bundle, add them.
    if (!empty($settings[$asset_type])) {
      $entity->inventory = $settings[$asset_type];
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function farm_inventory_entity_insert($entity, $type) {

  // Only act on farm_asset_type entities.
  if ($type != 'farm_asset_type') {
    return;
  }

  // Save asset type inventory settings.
  _farm_inventory_asset_type_settings_save($entity);
}

/**
 * Implements hook_entity_update().
 */
function farm_inventory_entity_update($entity, $type) {

  // Only act on farm_asset_type entities.
  if ($type != 'farm_asset_type') {
    return;
  }

  // Save asset type inventory settings.
  _farm_inventory_asset_type_settings_save($entity);
}

/**
 * Helper function for saving asset type inventory settings when an asset type
 * is inserted or updated.
 *
 * @param FarmAssetType $asset_type
 *   A farm asset type entity.
 */
function _farm_inventory_asset_type_settings_save($asset_type) {

  // If the machine name is not set, bail.
  if (empty($asset_type->type)) {
    return;
  }

  // If inventory settings are provided, save them.
  if (!empty($asset_type->inventory)) {

    // First, delete existing settings.
    _farm_inventory_asset_type_settings_delete($asset_type->type);

    // Then, save new settings.
    $record = array('type' => $asset_type->type);
    $record = array_merge($record, $asset_type->inventory);
    drupal_write_record('farm_inventory_asset_type', $record);
  }
}

/**
 * Implements hook_entity_update().
 */
function farm_inventory_entity_delete($entity, $type) {

  // Only act on farm_asset_type entities.
  if ($type != 'farm_asset_type') {
    return;
  }

  // If the asset machine name is not set, bail.
  if (empty($entity->type)) {
    return;
  }

  // Delete settings for this asset type.
  _farm_inventory_asset_type_settings_delete($entity->type);
}

/**
 * Helper function for deleting asset type inventory settings.
 *
 * @param string $type
 *   The asset type machine name.
 */
function _farm_inventory_asset_type_settings_delete($type) {
  db_query('DELETE FROM {farm_inventory_asset_type} WHERE type = :type', array(':type' => $type));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function farm_inventory_form_farm_asset_type_form_alter(&$form, &$form_state, $form_id) {

  // Get the asset type machine name, if available.
  $type = '';
  if (!empty($form['type']['#default_value'])) {
    $type = $form['type']['#default_value'];
  }

  // Load existing settings for this asset type.
  $settings = array();
  if (!empty($type)) {
    $settings = db_query('SELECT * FROM {farm_inventory_asset_type} WHERE type = :type', array(':type' => $type))->fetchAssoc();
  }

  // Add inventory configuration fieldset for the asset type.
  $form['inventory'] = array(
    '#type' => 'fieldset',
    '#title' => t('Inventory'),
    '#description' => t('Configure inventory management options for this asset type.'),
    '#tree' => TRUE,
  );

  // Enable inventory.
  $form['inventory']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable inventory tracking'),
    '#default_value' => !empty($settings['enabled']) ? TRUE : FALSE,
  );

  // Define the default inventory value.
  $form['inventory']['individual'] = array(
    '#type' => 'checkbox',
    '#title' => t('Assets are individuals'),
    '#description' => t('If this is enabled, assets that have no inventory adjustments will be assumed to be individuals, and will have a default inventory of 1. If this is disabled, the default inventory for assets of this type will be zero.'),
    '#default_value' => !empty($settings['individual']) ? TRUE : FALSE,
  );
}

/**
 * Check whether or not inventory management is enabled on an asset.
 *
 * @param FarmAsset $asset
 *   The asset to check.
 *
 * @return bool
 *   Returns TRUE or FALSE.
 */
function farm_inventory_enabled(FarmAsset $asset) {

  // If the asset type is not set, bail.
  if (empty($asset->type)) {
    return FALSE;
  }

  // Check the database to see if inventory management is enabled.
  $result = db_query('SELECT enabled FROM {farm_inventory_asset_type} WHERE type = :type', array(':type' => $asset->type))->fetchField();

  // Return TRUE or FALSE.
  if (!empty($result)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Check whether or not an asset is treated as an individual by default.
 *
 * @param FarmAsset $asset
 *   The asset to check.
 *
 * @return bool
 *   Returns TRUE or FALSE.
 */
function farm_inventory_individual(FarmAsset $asset) {

  // If the asset type is not set, bail.
  if (empty($asset->type)) {
    return FALSE;
  }

  // Check the database to see if the asset is treated as an individual.
  $result = db_query('SELECT individual FROM {farm_inventory_asset_type} WHERE type = :type', array(':type' => $asset->type))->fetchField();

  // Return TRUE or FALSE.
  if (!empty($result)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Calculate an asset's inventory level.
 *
 * @param FarmAsset $asset
 *   The farm_asset object to calculate inventory for.
 * @param int $time
 *   Unix timestamp limiter. Only logs before this time will be included.
 *   Defaults to the current time. Set to 0 to load the absolute last.
 * @param bool $done
 *   Whether or not to only load inventory from logs that are marked as "done".
 *   Defaults to TRUE.
 *
 * @return string
 *   Returns the asset's inventory as a string.
 */
function farm_inventory(FarmAsset $asset, $time = REQUEST_TIME, $done = TRUE) {

  // If the asset doesn't have an ID (for instance if it is new and hasn't been
  // saved yet), bail.
  if (empty($asset->id)) {
    return FALSE;
  }

  // Make a query for calculating the inventory.
  $query = farm_inventory_query($asset->id, $time, $done);

  // Execute the query and gather the inventory result.
  $result = $query->execute();
  $inventory = $result->fetchField();

  // Add zero (to remove trailing zeroes).
  // See https://stackoverflow.com/questions/14531679/remove-useless-zero-digits-from-decimals-in-php
  $inventory += 0;

  // Convert to a string.
  $inventory = (string) $inventory;

  // Return the inventory.
  return $inventory;
}

/**
 * Build a query to calculate an asset's inventory level.
 *
 * @param int $asset_id
 *   The asset id to search for.
 * @param int $time
 *   Unix timestamp limiter. Only logs before this time will be included.
 *   Defaults to the current time. Set to 0 to load the absolute last.
 * @param bool $done
 *   Whether or not to only show logs that are marked as "done". Defaults to
 *   TRUE.
 *
 * @return \SelectQuery
 *   Returns a SelectQuery object.
 */
function farm_inventory_query($asset_id, $time = REQUEST_TIME, $done = TRUE) {

  /**
   * This function is modeled after farm_movement_asset_movement_query().
   * It intentionally does not use any database query methods that pass
   * arguments separately (ie: condition()), because those do not work when the
   * query is used as a sub-select join (via the views_join_subquery class). So
   * it is the responsibility of this function to sanitize any inputs that are
   * used directly in SQL.
   */

  // Ensure $asset_id and $time are positive integers, because we use them
  // directly in the query's WHERE statements below. This is defensive code.
  // See note about views_join_subquery above.
  if (!is_int($asset_id) || $asset_id < 0) {
    $asset_id = (int) $asset_id;
  }
  if (!is_int($time) || $time < 0) {
    $time = REQUEST_TIME;
  }

  // Build a query to calculate an asset's inventory level, based on logs.
  $query = db_select('log', 'l');

  // Join in the Inventory field collection's asset and value fields.
  $query->join('field_data_field_farm_inventory', 'fdffi', "fdffi.entity_type = 'log' AND fdffi.entity_id = l.id AND fdffi.deleted = 0");
  $query->join('field_data_field_farm_inventory_asset', 'fdffia', "fdffia.entity_id = fdffi.field_farm_inventory_value AND fdffia.deleted = 0");
  $query->join('field_data_field_farm_inventory_value', 'fdffiv', "fdffiv.entity_id = fdffi.field_farm_inventory_value AND fdffiv.deleted = 0");

  // Filter to only include logs that have inventory adjustments.
  $query->where('fdffi.field_farm_inventory_value IS NOT NULL');

  // Filter to only include inventory adjustments to the specified asset.
  $query->where('fdffia.field_farm_inventory_asset_target_id = ' . $asset_id);

  // If $time is not zero, limit to only logs before it. This allows the
  // absolute last log to be found by setting $time to zero.
  if ($time !== 0) {
    $query->where('l.timestamp <= ' . $time);
  }

  // If only "done" movement logs should be included, add a filter.
  if ($done) {
    $query->where('l.done = 1');
  }

  // Order by timestamp and then log id, descending.
  $query->orderBy('l.timestamp', 'DESC');
  $query->orderBy('l.id', 'DESC');

  // Add an expression that calculates the SUM of all values.
  $query->addExpression('SUM(fdffiv.field_farm_inventory_value_numerator / fdffiv.field_farm_inventory_value_denominator)', 'inventory');

  // Return the query object.
  return $query;
}
