<?php
/**
 * @file
 * Code for the Farm Log: Harvest feature.
 */

// Include Features code.
include_once 'farm_log_harvest.features.inc';

/**
 * Implements hook_farm_ui_entities().
 */
function farm_log_harvest_farm_ui_entities() {
  return array(
    'log' => array(
      'farm_harvest' => array(
        'label' => t('Harvest'),
        'label_plural' => t('Harvests'),
        'view' => 'farm_log_harvest',
        'areas' => TRUE,
        'weight' => 80,
      ),
    ),
  );
}

/**
 * Implements hook_feeds_importer_default_alter().
 */
function farm_log_harvest_feeds_importer_default_alter(&$importers) {

  // Add extra field mappings to harvests.
  $name = 'log_farm_harvest';
  if (!empty($importers[$name])) {
    $mappings = array(
      array(
        'source' => 'Lot number',
        'target' => 'field_farm_lot_number',
        'unique' => FALSE,
        'language' => 'und',
      ),
      array(
        'source' => 'Archive assets',
        'target' => 'log_farm_harvest_archive_assets',
        'unique' => FALSE,
        'language' => 'und',
      ),
    );
    $importer_mappings =& $importers[$name]->config['processor']['config']['mappings'];
    $importer_mappings = array_merge($importer_mappings, $mappings);
  }
}

/**
 * Implements hook_feeds_tamper_default_alter().
 */
function farm_log_harvest_feeds_tamper_default_alter(&$feeds_tampers) {

  // If farm_import is not installed, bail.
  if (!module_exists('farm_import')) {
    return;
  }

  // Convert "Archive assets" to boolean.
  $feeds_tamper = farm_import_feeds_tamper_plugin('log', 'farm_harvest', 'Archive assets', 'boolean_default_false');
  $feeds_tampers[$feeds_tamper->id] = $feeds_tamper;
}

/**
 * Implements hook_feeds_processor_targets_alter().
 */
function farm_log_harvest_feeds_processor_targets_alter(&$targets, $type, $bundle) {
  if ($type == 'log' && $bundle == 'farm_harvest') {
    $targets['log_farm_harvest_archive_assets'] = array(
      'name' => t('Archive assets'),
      'description' => t('Archives the assets referenced on the log.'),
      'callback' => 'farm_log_harvest_archive_assets',
    );
  }
}

/**
 * Callback for 'log_farm_harvest_archive_assets' target.
 */
function farm_log_harvest_archive_assets($source, $entity, $target, $value, $mapping) {

  // Don't do anything if we weren't given any data.
  if (empty($value)) {
    return;
  }

  // In case the value arrives as an array.
  if (is_array($value)) {
    $value = reset($value);
  }

  // Do nothing if the archiving is set to any of the FALSE values.
  if (empty($value)) {
    return;
  }

  // Load log entity metadata wrapper.
  $log_wrapper = entity_metadata_wrapper('log', $entity);

  // Iterate through the assets and archive them (if they aren't already).
  foreach ($log_wrapper->field_farm_asset as $asset_wrapper) {
    $asset = $asset_wrapper->value();
    if (empty($asset->archived)) {
      $asset->archived = REQUEST_TIME;
      farm_asset_save($asset);
    }
  }
}
