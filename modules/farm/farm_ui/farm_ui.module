<?php

/**
 * @file
 * Farm UI module code.
 */

/**
 * Implements hook_entity_view().
 */
function farm_ui_entity_view($entity, $type, $view_mode, $langcode) {

  // If the view mode is not 'full', bail.
  if ($view_mode != 'full') {
    return;
  }

  // We are only concerned with farm_asset and taxonomy_term entities.
  $entity_types = array(
    'farm_asset',
    'taxonomy_term',
  );
  if (!in_array($type, $entity_types)) {
    return;
  }

  // Determine the bundle based on the type.
  switch ($type) {
    case 'farm_asset':
      $bundle = $entity->type;
      break;
    case 'taxonomy_term':
      $bundle = $entity->vocabulary_machine_name;
      break;
  }

  // Get the breadcrumb from our helper function.
  $breadcrumb = farm_ui_entity_type_breadcrumb($type, $bundle);

  // Add base breadcrumb items to the front.
  $base = array(
    l(t('Home'), '<front>'),
    l(t('Farm'), 'farm'),
  );
  $breadcrumb = array_merge($base, $breadcrumb);

  // Set the breadcrumb.
  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Build breadcrumbs for a specific entity type and bundle.
 *
 * @param $type
 *   The entity type.
 * @param $bundle
 *   The bundle.
 *
 * @return array
 *   Returns a breadcrumb array.
 */
function farm_ui_entity_type_breadcrumb($type, $bundle) {

  // Start an empty breadcrumb array.
  $breadcrumb = array();

  // Load entity UI information.
  $ui_info = farm_ui_entities($type, $bundle);

  // Get the label (plural). Bail if it's not set.
  if (empty($ui_info['label_plural'])) {
    return $breadcrumb;
  }
  $label = $ui_info['label_plural'];

  // If the entity type has a View, load the path.
  if (!empty($ui_info['view'])) {
    $path = farm_ui_view_page_path($ui_info['view']);
  }

  // If this is a farm_asset entity, add a link to the full assets list.
  if ($type == 'farm_asset') {
    $breadcrumb[] = l(t('Assets'), 'farm/assets');
  }

  // If this is a taxonomy_term entity, and it is linked to a specific asset
  // type, add the asset breadcrumb trail (recurse into this function again).
  if ($type == 'taxonomy_term' && !empty($ui_info['farm_asset'])) {
    $asset_breadcrumbs = farm_ui_entity_type_breadcrumb('farm_asset', $ui_info['farm_asset']);
    $breadcrumb = array_merge($asset_breadcrumbs, $breadcrumb);
  }

  // If a path was found, add a link to the breadcrumb. Otherwise, add a simple
  // text breadcrumb.
  if (!empty($path)) {
    $breadcrumb[] = l($label, $path);
  }
  else {
    $breadcrumb[] = $label;
  }

  // If this is a taxonomy_term entity, get the default breadcrumb and tack it
  // onto the end, so we can take advantage of the structure already provided
  // by the taxonomy hierarchy. Shift the first item off (home) because we've
  // started a new breadcrumb from scratch.
  if ($type == 'taxonomy_term') {
    $default_breadcrumb = drupal_get_breadcrumb();
    array_shift($default_breadcrumb);
    $breadcrumb = array_merge($breadcrumb, $default_breadcrumb);
  }

  // Return the breadcrumb.
  return $breadcrumb;
}

/**
 * Helper function for getting the path to a View's page display.
 *
 * @param string $view_name
 *   The machine name of the View.
 * @param string $display
 *   The machine name of the page display (defaults to "page").
 *
 * @return string
 *   Returns the path to a View's page display.
 */
function farm_ui_view_page_path($view_name, $display = 'page') {

  // Load the View.
  $view = views_get_view($view_name);

  // If the page display exists and has a path, return it.
  if (!empty($view->display[$display]->display_options['path'])) {
    return $view->display[$display]->display_options['path'];
  }

  // Otherwise, return an empty string.
  return '';
}

/**
 * Implements hook_farm_ui_actions().
 */
function farm_ui_farm_ui_actions() {

  // Define default farm action links.
  $actions = array(
    'area' => array(
      'title' => t('Add an area'),
      'href' => 'admin/structure/taxonomy/farm_areas/add',
      'views' => array(
        'farm_areas',
      ),
      'paths' => array(
        'farm',
      ),
      'weight' => -10,
    ),
    'asset' => array(
      'title' => t('Add an asset'),
      'href' => 'farm/asset/add',
      'paths' => array(
        'farm',
        'farm/assets',
      ),
    ),
    'log' => array(
      'title' => t('Add a log'),
      'href' => 'log/add',
      'paths' => array(
        'farm',
        'farm/logs',
      ),
      'weight' => 1,
    ),
    'user' => array(
      'title' => t('Add a person'),
      'href' => 'admin/people/create',
      'views' => array(
        'farm_people',
      ),
    ),
  );

  // Load entity UI information.
  $ui_info = farm_ui_entities();

  // For each asset type, create an action link on its listing page.
  foreach ($ui_info['farm_asset'] as $asset_type => $asset_info) {
    if (!empty($asset_info['label']) && !empty($asset_info['view'])) {
      $actions[$asset_type] = array(
        'title' => t('Add ' . strtolower($asset_info['label'])),
        'href' => 'farm/asset/add/' . $asset_type,
        'views' => array(
          $asset_info['view'],
        ),
      );
    }
  }

  return $actions;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function farm_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  // Load path actions from modules.
  $actions = module_invoke_all('farm_ui_actions');

  // If no path actions were provided, bail.
  if (empty($actions)) {
    return;
  }

  // Sort by weight.
  uasort($actions, 'drupal_sort_weight');

  // Add actions to farm/asset/* paths.
  if ($router_item['page_callback'] == 'farm_asset_view') {

    // Get the asset id from the path.
    $asset_id = check_plain(arg(2));

    // Iterate through the actions.
    foreach ($actions as $name => $action) {

      // If the list of assets types is empty, skip it.
      if (empty($actions[$name]['assets'])) {
        continue;
      }

      // If 'all' assets are not allowed...
      if (!in_array('all', $actions[$name]['assets'])) {

        // Load the asset.
        $asset = farm_asset_load($asset_id);

        // If the asset's type is not in the list of acceptable types, skip it.
        if (!in_array($asset->type, $actions[$name]['assets'])) {
          continue;
        }
      }

      // Build the action link.
      $link = _farm_ui_action_link($actions[$name]['title'], $actions[$name]['href'], array('destination' => 'farm/asset/' . $asset_id, 'farm_asset' => $asset_id));

      // Add the action link to the output.
      $data['actions']['output'][] = $link;
    }
  }

  // Add actions to Views pages.
  elseif ($router_item['page_callback'] == 'views_page') {

    // Iterate through the actions.
    foreach ($actions as $name => $action) {

      // If the list of Views is empty, skip it.
      if (empty($actions[$name]['views'])) {
        continue;
      }

      // Get the View name from the first page argument.
      $view_name = reset($router_item['page_arguments']);

      // If the View is not in the list of acceptable Views, skip it.
      if (!in_array($view_name, $actions[$name]['views'])) {
        continue;
      }

      // Build the action link.
      $link = _farm_ui_action_link($actions[$name]['title'], $actions[$name]['href'], array('destination' => $root_path));

      // Add the action link to the output.
      $data['actions']['output'][] = $link;
    }
  }

  // Create a new array of actions keyed by path.
  $path_actions = array();
  foreach ($actions as $name => $action) {
    if (!empty($action['paths'])) {
      foreach ($action['paths'] as $path) {
        $path_actions[$path][] = $name;
      }
    }
  }

  // Add actions depending on the root path.
  if (array_key_exists($root_path, $path_actions)) {
    foreach ($path_actions[$root_path] as $name) {

      // Generate the action link.
      $link = _farm_ui_action_link($actions[$name]['title'], $actions[$name]['href'], array('destination' => $root_path));

      if ($root_path == 'taxonomy/term/%' || substr($root_path, 0, 11) == 'farm/area/%') {

        // Get the area id from the path.
        $area_id = check_plain(arg(2));

        // Load the area taxonomy term.
        $term = taxonomy_term_load($area_id);

        // If the taxonomy term is not a farm_area, bail.
        if (empty($term->vocabulary_machine_name) || $term->vocabulary_machine_name != 'farm_areas') {
          continue;
        }

        // Build the action link.
        $link = _farm_ui_action_link($actions[$name]['title'], $actions[$name]['href'], array('destination' => 'taxonomy/term/' . $area_id, 'farm_area' => $area_id));
      }

      // Add the action link to the output.
      $data['actions']['output'][] = $link;
    }
  }
}

/**
 * Helper function for generating an action link.
 *
 * @param string $title
 *   The title of the action link.
 * @param string $href
 *   The href path of the action link.
 * @param array $query
 *   An array of additional query parameters to add.
 *
 * @return array
 *   Returns an action link.
 *
 * @see farm_ui_menu_local_tasks_alter()
 */
function _farm_ui_action_link($title, $href, $query = array()) {
  $action_link = array(
    '#theme' => 'menu_local_action',
    '#link' => array(
      'title' => $title,
      'href' => $href,
      'localized_options' => array(
        'query' => $query,
      ),
    ),
  );
  return $action_link;
}

/**
 * Load farmOS entity UI information.
 *
 * @param string $type
 *   Optionally specify the entity type.
 * @param string $bundle
 *   Optionally specify the entity bundle.
 *
 * @return array
 *   Returns an array of entity UI information.
 */
function farm_ui_entities($type = '', $bundle = '') {

  // Ask modules for entity UI information.
  $entity_info = module_invoke_all('farm_ui_entities');

  // If a type and bundle are specified, return specific info.
  if (!empty($type) && !empty($bundle)) {
    $bundle_info = array();
    if (!empty($entity_info[$type][$bundle])) {
      $bundle_info = $entity_info[$type][$bundle];
    }
    return $bundle_info;
  }

  // Return the entity UI information.
  return $entity_info;
}
