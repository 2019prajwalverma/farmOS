<?php

/**
 * @file
 * Farm UI module code.
 */

/**
 * Implements hook_hook_info().
 */
function farm_ui_hook_info() {
  $hooks['farm_ui_entities'] = array(
    'group' => 'farm_ui',
  );
  $hooks['farm_ui_entity_views'] = array(
    'group' => 'farm_ui',
  );
  return $hooks;
}

/**
 * Implements hook_entity_view().
 */
function farm_ui_entity_view($entity, $type, $view_mode, $langcode) {

  // If the view mode is not 'full', bail.
  if ($view_mode != 'full') {
    return;
  }

  // We are only concerned with farm_asset, log, and taxonomy_term, entities.
  $entity_types = array(
    'farm_asset',
    'log',
    'taxonomy_term',
  );
  if (!in_array($type, $entity_types)) {
    return;
  }

  // Determine the bundle based on the type.
  switch ($type) {
    case 'farm_asset':
    case 'log':
      $bundle = $entity->type;
      break;
    case 'taxonomy_term':
      $bundle = $entity->vocabulary_machine_name;
      break;
  }

  // Set the entity breadcrumb.
  module_load_include('inc', 'farm_ui', 'farm_ui.breadcrumb');
  farm_ui_entity_set_breadcrumb($type, $bundle);

  // Add Views to the entity.
  module_load_include('inc', 'farm_ui', 'farm_ui.entity_views');
  $views = farm_ui_entity_views($type, $bundle, $entity);
  if (!empty($views)) {
    $entity->content['views'] = $views;
    $entity->content['views']['#weight'] = 100;
  }
}

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function farm_ui_menu_breadcrumb_alter(&$active_trail, $item) {

  // Use helper function to alter the breadcrumb.
  module_load_include('inc', 'farm_ui', 'farm_ui.breadcrumb');
  _farm_ui_menu_breadcrumb_alter($active_trail, $item);
}

/**
 * Helper function for getting the path to a View's page display.
 *
 * @param string $view_name
 *   The machine name of the View.
 * @param string $display
 *   The machine name of the page display (defaults to "page").
 *
 * @return string
 *   Returns the path to a View's page display.
 */
function farm_ui_view_page_path($view_name, $display = 'page') {

  // Load the View.
  $view = views_get_view($view_name);

  // If the page display exists and has a path, return it.
  if (!empty($view->display[$display]->display_options['path'])) {
    return $view->display[$display]->display_options['path'];
  }

  // Otherwise, return an empty string.
  return '';
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function farm_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  // Use helper function to add farmOS action links.
  module_load_include('inc', 'farm_ui', 'farm_ui.action_links');
  _farm_ui_menu_local_tasks_alter($data, $router_item, $root_path);
}

/**
 * Load farmOS entity UI information.
 *
 * @param string $type
 *   Optionally specify the entity type.
 * @param string $bundle
 *   Optionally specify the entity bundle.
 *
 * @return array
 *   Returns an array of entity UI information.
 */
function farm_ui_entities($type = '', $bundle = '') {

  // Ask modules for entity UI information and static cache the results.
  $entity_info = &drupal_static(__FUNCTION__);
  if (!isset($entity_info)) {
    $entity_info = module_invoke_all('farm_ui_entities');
  }

  // If a type and bundle are specified, return specific info.
  if (!empty($type) && !empty($bundle)) {
    $bundle_info = array();
    if (!empty($entity_info[$type][$bundle])) {
      $bundle_info = $entity_info[$type][$bundle];
    }
    return $bundle_info;
  }

  // Return the entity UI information.
  return $entity_info;
}

/**
 * Implements hook_entityreference_view_widget_views_arguments_alter().
 */
function farm_ui_entityreference_view_widget_views_arguments_alter(&$arguments, $form_state, $view) {

  // The farm_log module provides a View that is used for searching and
  // selecting assets for the field_farm_asset entity reference field, using
  // the Entity Reference View Widget module.
  //
  // In some cases, we want to limit what shows up in the View of assets, based
  // on the log type that the field is on. For instance, a seeding should only
  // be able to reference planting assets, but it still uses the general
  // field_farm_asset field, which technically can reference any asset type.
  //
  // The Entity Reference View Widget module provides this hook to allow the
  // View arguments to be altered. We implement this hook, and use information
  // provided by hook_farm_ui_entities() to see if we should filter the View
  // results to a specific asset type, given the current log type.
  //
  // The View that we use is farm_asset_entityreference_view, which has two
  // contextual arguments: asset id (to filter out already-selected assets), and
  // asset type. The code below only tries to set the asset type argument, and
  // maintains any asset id argument that is already set.

  /**
   * @todo
   * Note that this does NOT alter the "Asset type" exposed filter. So users
   * will still see that filter, and it will still default to "- Any -". If
   * the contextual filter is activated here, however, then selecting any other
   * asset type with the exposed filter will return an empty result set. That's
   * confusing, so perhaps we should find a way to hide that exposed filter if
   * this code successfully sets a contextual filter argument.
   */

  // Only apply this to the View: farm_asset_entityreference_view
  if ($view->name != 'farm_asset_entityreference_view') {
    return;
  }

  // Figure out what the log type is.
  if (!empty($form_state['build_info']['args'][0]->type)) {
    $log_type = $form_state['build_info']['args'][0]->type;
  }

  // If that failed, bail.
  else {
    return;
  }

  // Load entity UI info for this log type.
  $ui_info = farm_ui_entities('log', $log_type);

  // If the asset type is empty, or 'all', or 'none', then we will stop here
  // because we don't want to apply any filtering.
  if (empty($ui_info['farm_asset']) || in_array($ui_info['farm_asset'], array('all', 'none'))) {
    return;
  }

  // Take the asset type specified so we can use it as a filter.
  $type = $ui_info['farm_asset'];

  // We need to ensure that the first argument is reserved for asset id(s). So
  // if it's not set, set it to 'all'.
  if (empty($arguments)) {
    $arguments[0] = 'all';
  }

  // Add the asset type as the second argument.
  $arguments[1] = $type;
}

/**
 * Encapsulates logic for figuring out where the area ID argument is in a View.
 *
 * Views of assets should always have an area ID as their first contextual
 * filter.
 *
 * Views of logs are a bit more complicated. Most logs apply to assets, so they
 * have an asset ID contextual filter first, and an area ID contextual filter
 * second. However, some logs do not apply to assets, so the first contextual
 * filter is the area ID.
 *
 * This function will use information provided by hook_farm_ui_entities() to
 * determine the position of the area ID argument. In general, it will return
 * 1 (the first argument position). If the entity type is 'log', and the log
 * type does not apply to assets, then it will return 2 (second argument).
 *
 * @param $type
 *   The entity type.
 * @param $bundle
 *   The entity bundle.
 *
 * @return int
 *   Returns the position of the area ID argument as an integer.
 */
function farm_ui_views_area_argument_position($type, $bundle) {

  // Load entity UI information.
  $ui_info = farm_ui_entities($type, $bundle);

  // Default the area ID argument position to 1.
  $arg = 1;

  // If this is a log entity that applies to assets, the argument position
  // should be 2.
  if ($type == 'log' && (empty($ui_info['farm_asset']) || $ui_info['farm_asset'] != 'none')) {
    $arg = 2;
  }

  // Return the argument position.
  return $arg;
}

/**
 * Implements hook_views_post_render().
 */
function farm_ui_views_post_render(&$view, &$output, &$cache) {

  // Use helper function to add asset cluster maps to Views.
  module_load_include('inc', 'farm_ui', 'farm_ui.views');
  _farm_ui_views_post_render($view, $output, $cache);
}
