<?php

/**
 * @file
 * Farm UI module code.
 */

/**
 * Implements hook_hook_info().
 */
function farm_ui_hook_info() {
  $hooks['farm_ui_entities'] = array(
    'group' => 'farm_ui',
  );
  $hooks['farm_ui_entity_views'] = array(
    'group' => 'farm_ui',
  );
  return $hooks;
}

/**
 * Implements hook_entity_view().
 */
function farm_ui_entity_view($entity, $type, $view_mode, $langcode) {

  // If the view mode is not 'full', bail.
  if ($view_mode != 'full') {
    return;
  }

  // We are only concerned with farm_asset, log, and taxonomy_term, entities.
  $entity_types = array(
    'farm_asset',
    'log',
    'taxonomy_term',
  );
  if (!in_array($type, $entity_types)) {
    return;
  }

  // Determine the bundle based on the type.
  switch ($type) {
    case 'farm_asset':
    case 'log':
      $bundle = $entity->type;
      break;
    case 'taxonomy_term':
      $bundle = $entity->vocabulary_machine_name;
      break;
  }

  // Set the entity breadcrumb.
  module_load_include('inc', 'farm_ui', 'farm_ui.breadcrumb');
  farm_ui_entity_set_breadcrumb($type, $bundle);

  // Add Views to the entity.
  $views = farm_ui_entity_views($type, $bundle, $entity);
  if (!empty($views)) {
    $entity->content['views'] = $views;
    $entity->content['views']['#weight'] = 100;
  }
}

/**
 * Build a renderable array of Views to add to a farmOS entity.
 *
 * @param $entity_type
 *   The entity type. Currently supports: 'farm_asset' or 'taxonomy_term'.
 * @param $entity_bundle
 *   The entity bundle.
 * @param $entity
 *   The loaded entity object.
 *
 * @return array
 *   Returns a render array of Views to add to the entity page.
 */
function farm_ui_entity_views($entity_type, $entity_bundle, $entity) {

  // Start an empty build array.
  $build = array();

  // Start an empty array of Views.
  $views = array();

  // Load entity UI information.
  $ui_info = farm_ui_entities();

  // Automatically generate a list of log Views to display on assets.
  if ($entity_type == 'farm_asset' && !empty($ui_info['log'])) {
    foreach ($ui_info['log'] as $bundle => $info) {

      // If a View is not defined, skip it.
      if (empty($info['view'])) {
        continue;
      }

      // If the log applies to this asset type (or to all types), add the View.
      if (empty($info['farm_asset']) || $info['farm_asset'] == 'all' || $info['farm_asset'] == $entity->type) {
        $view = array(
          'name' => $info['view'],
        );
        if (!empty($info['weight'])) {
          $view['weight'] = $info['weight'];
        }
        $views[] = $view;
      }
    }
  }

  // Ask modules for Views.
  $module_views = module_invoke_all('farm_ui_entity_views', $entity_type, $entity_bundle, $entity);
  if (!empty($module_views)) {
    $views = array_merge($views, $module_views);
  }

  // If there are no Views, bail.
  if (empty($views)) {
    return $build;
  }

  // Process the list of Views into a standardized list,
  // and prepare to order by weight and name.
  $weight_index = array();
  $name_index = array();
  foreach ($views as $key => $data) {

    // If the data is just a name, wrap it in an array.
    if (!is_array($data)) {
      $data = array(
        'name' => $data,
      );
    }

    // Merge with defaults.
    $defaults = array(
      'arg' => 1,
      'weight' => 0,
    );
    $views[$key] = array_merge($defaults, $data);

    // Add to the weight and name indexes for sorting.
    $weight_index[$key] = $views[$key]['weight'];
    $name_index[$key] = $views[$key]['name'];
  }

  // Sort the Views by weight ascending, name ascending.
  array_multisort($weight_index, SORT_ASC, $name_index, SORT_ASC, $views);

  // Define the ID property of the entity, based on the type.
  switch ($entity_type) {
    case 'farm_asset':
      $id = 'id';
      break;
    case 'taxonomy_term':
      $id = 'tid';
      break;
  }

  // Add the Views to the entity's render array.
  foreach ($views as $key => $data) {

    // Load the View, and bail if it isn't found.
    $view = views_get_view($data['name']);
    if (empty($view)) {
      continue;
    }

    // Determine the argument position (default to 1).
    // This looks for the presence of $data['arg'] to learn which argument
    // in the View we should send $entity->{$id} into. This is useful if the View
    // has multiple contextual filters, and the entity filter is not first.
    // Any arguments that come before the term argument will receive 'all'
    // as their input.
    $args = array();
    $arg_pos = isset($data['arg']) ? $data['arg'] : 1;
    for ($i = 1; $i <= $arg_pos; $i++) {
      if ($i == $arg_pos) {
        $args[] = $entity->{$id};
      }
      else {
        $args[] = 'all';
      }
    }

    // If a specific display was specified, use it. Otherwise use 'default'.
    if (!empty($data['display'])) {
      $display = $data['display'];
    }
    else {
      $display = 'default';
    }
    $view->set_display($display);

    // Get the View's default title.
    // We intentionally do this before we build the preview so that the title
    // is not overridden by the arguments. This keeps the title simple on the
    // actual entity page, but more descriptive in other contexts.
    $title = $view->get_title();

    // Build the View preview.
    $preview = $view->preview($display, $args);

    // Only display if the View has results (and 'always' is not TRUE).
    if (empty($data['always']) && $view->total_rows == 0) {
      continue;
    }

    // Build the output.
    $output = '<h3 id="' . $title . '">' . $title . '</h3>' . $preview;

    // Add the output to the entity build array.
    $build[$data['name']] = array(
      '#markup' => $output,
      '#weight' => 100 + $key,
    );
  }

  // Return the build array.
  return $build;
}

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function farm_ui_menu_breadcrumb_alter(&$active_trail, $item) {

  // Use helper function to alter the breadcrumb.
  module_load_include('inc', 'farm_ui', 'farm_ui.breadcrumb');
  _farm_ui_menu_breadcrumb_alter($active_trail, $item);
}

/**
 * Helper function for getting the path to a View's page display.
 *
 * @param string $view_name
 *   The machine name of the View.
 * @param string $display
 *   The machine name of the page display (defaults to "page").
 *
 * @return string
 *   Returns the path to a View's page display.
 */
function farm_ui_view_page_path($view_name, $display = 'page') {

  // Load the View.
  $view = views_get_view($view_name);

  // If the page display exists and has a path, return it.
  if (!empty($view->display[$display]->display_options['path'])) {
    return $view->display[$display]->display_options['path'];
  }

  // Otherwise, return an empty string.
  return '';
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function farm_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  // Use helper function to add farmOS action links.
  module_load_include('inc', 'farm_ui', 'farm_ui.action_links');
  _farm_ui_menu_local_tasks_alter($data, $router_item, $root_path);
}

/**
 * Load farmOS entity UI information.
 *
 * @param string $type
 *   Optionally specify the entity type.
 * @param string $bundle
 *   Optionally specify the entity bundle.
 *
 * @return array
 *   Returns an array of entity UI information.
 */
function farm_ui_entities($type = '', $bundle = '') {

  // Ask modules for entity UI information and static cache the results.
  $entity_info = &drupal_static(__FUNCTION__);
  if (!isset($entity_info)) {
    $entity_info = module_invoke_all('farm_ui_entities');
  }

  // If a type and bundle are specified, return specific info.
  if (!empty($type) && !empty($bundle)) {
    $bundle_info = array();
    if (!empty($entity_info[$type][$bundle])) {
      $bundle_info = $entity_info[$type][$bundle];
    }
    return $bundle_info;
  }

  // Return the entity UI information.
  return $entity_info;
}

/**
 * Implements hook_entityreference_view_widget_views_arguments_alter().
 */
function farm_ui_entityreference_view_widget_views_arguments_alter(&$arguments, $form_state, $view) {

  // The farm_log module provides a View that is used for searching and
  // selecting assets for the field_farm_asset entity reference field, using
  // the Entity Reference View Widget module.
  //
  // In some cases, we want to limit what shows up in the View of assets, based
  // on the log type that the field is on. For instance, a seeding should only
  // be able to reference planting assets, but it still uses the general
  // field_farm_asset field, which technically can reference any asset type.
  //
  // The Entity Reference View Widget module provides this hook to allow the
  // View arguments to be altered. We implement this hook, and use information
  // provided by hook_farm_ui_entities() to see if we should filter the View
  // results to a specific asset type, given the current log type.
  //
  // The View that we use is farm_asset_entityreference_view, which has two
  // contextual arguments: asset id (to filter out already-selected assets), and
  // asset type. The code below only tries to set the asset type argument, and
  // maintains any asset id argument that is already set.

  /**
   * @todo
   * Note that this does NOT alter the "Asset type" exposed filter. So users
   * will still see that filter, and it will still default to "- Any -". If
   * the contextual filter is activated here, however, then selecting any other
   * asset type with the exposed filter will return an empty result set. That's
   * confusing, so perhaps we should find a way to hide that exposed filter if
   * this code successfully sets a contextual filter argument.
   */

  // Only apply this to the View: farm_asset_entityreference_view
  if ($view->name != 'farm_asset_entityreference_view') {
    return;
  }

  // Figure out what the log type is.
  if (!empty($form_state['build_info']['args'][0]->type)) {
    $log_type = $form_state['build_info']['args'][0]->type;
  }

  // If that failed, bail.
  else {
    return;
  }

  // Load entity UI info for this log type.
  $ui_info = farm_ui_entities('log', $log_type);

  // If the asset type is empty, or 'all', or 'none', then we will stop here
  // because we don't want to apply any filtering.
  if (empty($ui_info['farm_asset']) || in_array($ui_info['farm_asset'], array('all', 'none'))) {
    return;
  }

  // Take the asset type specified so we can use it as a filter.
  $type = $ui_info['farm_asset'];

  // We need to ensure that the first argument is reserved for asset id(s). So
  // if it's not set, set it to 'all'.
  if (empty($arguments)) {
    $arguments[0] = 'all';
  }

  // Add the asset type as the second argument.
  $arguments[1] = $type;
}

/**
 * Encapsulates logic for figuring out where the area ID argument is in a View.
 *
 * Views of assets should always have an area ID as their first contextual
 * filter.
 *
 * Views of logs are a bit more complicated. Most logs apply to assets, so they
 * have an asset ID contextual filter first, and an area ID contextual filter
 * second. However, some logs do not apply to assets, so the first contextual
 * filter is the area ID.
 *
 * This function will use information provided by hook_farm_ui_entities() to
 * determine the position of the area ID argument. In general, it will return
 * 1 (the first argument position). If the entity type is 'log', and the log
 * type does not apply to assets, then it will return 2 (second argument).
 *
 * @param $type
 *   The entity type.
 * @param $bundle
 *   The entity bundle.
 *
 * @return int
 *   Returns the position of the area ID argument as an integer.
 */
function farm_ui_views_area_argument_position($type, $bundle) {

  // Load entity UI information.
  $ui_info = farm_ui_entities($type, $bundle);

  // Default the area ID argument position to 1.
  $arg = 1;

  // If this is a log entity that applies to assets, the argument position
  // should be 2.
  if ($type == 'log' && (empty($ui_info['farm_asset']) || $ui_info['farm_asset'] != 'none')) {
    $arg = 2;
  }

  // Return the argument position.
  return $arg;
}

/**
 * Implements hook_views_post_render().
 */
function farm_ui_views_post_render(&$view, &$output, &$cache) {

  // Use helper function to add asset cluster maps to Views.
  module_load_include('inc', 'farm_ui', 'farm_ui.views');
  _farm_ui_views_post_render($view, $output, $cache);
}
